//Дадена е еднострана поврзана листа чии што јазли содржат по еден String. Дополнително, даден е и уште еден природен број L.
//Во дадената листа потребно е сите јазли коишто содржат String со должина L да се поместат на крај на листата, задржувајќи го и оригиналниот распоред на елементите

import java.util.Scanner;

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }
}

class SLL<E> {
    private SLLNode<E> first;

    public SLL() {
        this.first = null;
    }

    public void deleteList() {
        first = null;
    }

    public int size() {
        int listSize = 0;
        SLLNode<E> tmp = first;
        while (tmp != null) {
            listSize++;
            tmp = tmp.succ;
        }
        return listSize;
    }

    @Override
    public String toString() {
        StringBuilder ret = new StringBuilder();
        if (first != null) {
            SLLNode<E> tmp = first;
            ret.append(tmp.element);
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret.append("->").append(tmp.element);
            }
        } else {
            ret = new StringBuilder("Prazna lista!!!");
        }
        return ret.toString();
    }

    public void insertFirst(E o) {
        SLLNode<E> ins = new SLLNode<>(o, first);
        first = ins;
    }

    public void insertLast(E o) {
        if (first != null) {
            SLLNode<E> tmp = first;
            while (tmp.succ != null)
                tmp = tmp.succ;
            tmp.succ = new SLLNode<>(o, null);
        } else {
            insertFirst(o);
        }
    }

    public SLLNode<E> getFirst() {
        return first;
    }

    public void moveNodes(int L) {
        SLLNode<E> iterator = first;
        SLL<E> newList = new SLL<>();

        while (iterator != null) {
            if (iterator.element.toString().length() != L) {
                newList.insertLast(iterator.element);
            }
            iterator = iterator.succ;
        }

        iterator = first;
        while (iterator != null) {
            if (iterator.element.toString().length() == L) {
                newList.insertLast(iterator.element);
            }
            iterator = iterator.succ;
        }

        System.out.println(toString());

        first = newList.getFirst();

        System.out.println(toString());

    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int N = scanner.nextInt();
        scanner.nextLine();

        SLL<String> list = new SLL<>();
        for (int i = 0; i < N; i++) {
            String element = scanner.nextLine();
            list.insertLast(element);
        }

        int L = scanner.nextInt();

        list.moveNodes(L);
    }
}
