//Студентската служба на факултет работи со студенти од
//09:00 до 12:00. Ако знаеме за секој студент од редицата
//колку време е потребно за студентската служба да го
//опслужи, да се одреди кој студент ќе биде првиот студент
//кој нема да биде опслужен и колку студенти што чекале во
//редицата за тој ден не се опслужени.


import java.util.NoSuchElementException;
import java.util.Scanner;

interface Queue<E> {
    // Elementi na redicata se objekti od proizvolen tip.
    // Metodi za pristap:
    public boolean isEmpty();
    // Vrakja true ako i samo ako redicata e prazena.

    public int size();
    // Ja vrakja dolzinata na redicata.

    public E peek();
    // Go vrakja elementot na vrvot t.e. pocetokot od redicata.

    // Metodi za transformacija:

    public void clear();
    // Ja prazni redicata.

    public void enqueue(E x);
    // Go dodava x na kraj od redicata.

    public E dequeue();
    // Go otstranuva i vrakja pochetniot element na redicata.
}

class LinkedQueue<E> implements Queue<E> {

    // Redicata e pretstavena na sledniot nacin:
    // length go sodrzi brojot na elementi.
    // Elementite se zachuvuvaat vo jazli dod SLL
    // front i rear se linkovi do prviot i posledniot jazel soodvetno.
    SLLNode<E> front, rear;
    int length;

    // Konstruktor ...

    public LinkedQueue () {
        clear();
    }

    public boolean isEmpty () {
        // Vrakja true ako i samo ako redicata e prazena.
        return (length == 0);
    }

    public int size () {
        // Ja vrakja dolzinata na redicata.
        return length;
    }

    public E peek () {
        // Go vrakja elementot na vrvot t.e. pocetokot od redicata.
        if (front == null)
            throw new NoSuchElementException();
        return front.element;
    }

    public void clear () {
        // Ja prazni redicata.
        front = rear = null;
        length = 0;
    }

    public void enqueue (E x) {
        // Go dodava x na kraj od redicata.
        SLLNode<E> latest = new SLLNode<E>(x, null);
        if (rear != null) {
            rear.succ = latest;
            rear = latest;
        } else
            front = rear = latest;
        length++;
    }

    public E dequeue () {
        // Go otstranuva i vrakja pochetniot element na redicata.
        if (front != null) {
            E frontmost = front.element;
            front = front.succ;
            if (front == null)  rear = null;
            length--;
            return frontmost;
        } else
            throw new NoSuchElementException();
    }

}
class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}
class Student{
    int index;
    int time;

    public Student(int index, int time) {
        this.index = index;
        this.time = time;
    }

    public int getIndex() {
        return index;
    }

    public int getTime() {
        return time;
    }

    public void setIndex(int index) {
        this.index = index;
    }

    public void setTime(int time) {
        this.time = time;
    }
}

public class Main {
    static Student studentService(Queue<Student> studentQueue){
        int min = 180;

        while(!studentQueue.isEmpty()){
            Student tempStudent = studentQueue.peek();
            if(min < tempStudent.time){
                return tempStudent;
            }
            else{
                min -= tempStudent.time;
                studentQueue.dequeue();
            }

        }
        return null;
    }




    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Queue<Student> studentsQueue = new LinkedQueue<>();
        for(int i=0; i<n; i++){
            int index = scanner.nextInt();
            int time = scanner.nextInt();
            Student student = new Student(index, time);
            studentsQueue.enqueue(student);
        }
        Student student = studentService(studentsQueue);
        if(studentsQueue.isEmpty()){
            System.out.println("Opsluzeni se site studenti");
        }
        else{
            System.out.println("Prviot student sto nema da e opsluzen e " + student.index);
            System.out.println("Brojot na studenti koi nema da se opsluzeni denes e: " +  studentsQueue.size());
            System.out.println("Brojot na studenti koi se opsluzeni denes e: " + (n - studentsQueue.size()));
        }
    }
}
